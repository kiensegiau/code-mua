import { NextResponse } from "next/server";
import { verifyJwtToken } from "@/app/_utils/jwt";

// Danh s√°ch c√°c ƒë∆∞·ªùng d·∫´n kh√¥ng y√™u c·∫ßu x√°c th·ª±c
const PUBLIC_PATHS = ["/sign-in", "/sign-up", "/forgot-password"];

export async function middleware(request) {
  const { pathname } = request.nextUrl;
  console.log("üöÄ Middleware ƒëang ch·∫°y cho ƒë∆∞·ªùng d·∫´n:", pathname);

  // Cho ph√©p truy c·∫≠p c√°c route c√¥ng khai
  if (PUBLIC_PATHS.some((path) => pathname.startsWith(path))) {
    console.log("‚úÖ ƒê∆∞·ªùng d·∫´n c√¥ng khai, cho ph√©p truy c·∫≠p");
    return NextResponse.next();
  }

  // L·∫•y token t·ª´ cookie
  const token = request.cookies.get("accessToken")?.value;
  console.log("üîë Token t·ª´ cookie:", token ? "T√¨m th·∫•y" : "Kh√¥ng t√¨m th·∫•y");

  // N·∫øu kh√¥ng c√≥ token, chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
  if (!token) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y token, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p");
    return NextResponse.redirect(new URL("/sign-in", request.url));
  }

  try {
    // X√°c th·ª±c token
    const verifiedToken = await verifyJwtToken(token);
    console.log(
      "üîí K·∫øt qu·∫£ x√°c th·ª±c token:",
      verifiedToken ? "H·ª£p l·ªá" : "Kh√¥ng h·ª£p l·ªá"
    );

    if (!verifiedToken || !verifiedToken.uid) {
      console.log("‚ùå Token kh√¥ng h·ª£p l·ªá, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p");
      const response = NextResponse.redirect(new URL("/sign-in", request.url));
      response.cookies.delete("accessToken");
      return response;
    }

    // Ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng qua API route
    try {
      // G·ªçi API ƒë·ªÉ ki·ªÉm tra t√†i kho·∫£n
      const apiUrl = new URL("/api/auth/verify-user", request.url);
      apiUrl.searchParams.append("uid", verifiedToken.uid);
      
      const apiResponse = await fetch(apiUrl.toString(), {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`
        }
      });
      
      const apiData = await apiResponse.json();
      
      if (!apiResponse.ok || !apiData.exists) {
        console.log("‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a, x√≥a token v√† chuy·ªÉn h∆∞·ªõng");
        const response = NextResponse.redirect(new URL("/sign-in", request.url));
        response.cookies.delete("accessToken");
        return response;
      }
      
      console.log("‚úÖ Ng∆∞·ªùi d√πng t·ªìn t·∫°i, cho ph√©p truy c·∫≠p");
      return NextResponse.next();
    } catch (userError) {
      console.error("‚ùå L·ªói ki·ªÉm tra ng∆∞·ªùi d√πng:", userError);
      // L·ªói khi ki·ªÉm tra t√†i kho·∫£n, t·∫°m th·ªùi cho ph√©p truy c·∫≠p
      // ƒê·ªÉ tr√°nh ng∆∞·ªùi d√πng b·ªã kh√≥a v√¨ l·ªói k·ªπ thu·∫≠t
      return NextResponse.next();
    }
  } catch (error) {
    console.error("‚ùå L·ªói x√°c th·ª±c token:", error);
    // Token kh√¥ng h·ª£p l·ªá, chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
    const response = NextResponse.redirect(new URL("/sign-in", request.url));
    response.cookies.delete("accessToken");
    return response;
  }
}

// C·∫•u h√¨nh c√°c route c·∫ßn √°p d·ª•ng middleware
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    "/((?!api|_next/static|_next/image|favicon.ico|public).*)",
  ],
};
