import { NextResponse } from "next/server";
import admin from "firebase-admin";
import { getAuth } from "firebase-admin/auth";
import { cert, getApps, initializeApp } from "firebase-admin/app";
import { generatePassword } from "../../../_utils/generators";
import { MongoClient } from "mongodb";

// Kh·ªüi t·∫°o Firebase Admin n·∫øu ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
if (!getApps().length) {
  try {
    const serviceAccount = {
      projectId: process.env.FIREBASE_ADMIN_PROJECT_ID,
      clientEmail: process.env.FIREBASE_ADMIN_CLIENT_EMAIL,
      privateKey: process.env.FIREBASE_ADMIN_PRIVATE_KEY?.replace(/\\n/g, '\n')
    };
    
    initializeApp({
      credential: cert(serviceAccount)
    });
    
    console.log("‚úÖ Firebase Admin SDK ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng");
  } catch (error) {
    console.error("‚ùå L·ªói kh·ªüi t·∫°o Firebase Admin SDK:", error);
  }
}

// L·∫•y service Firebase Auth
const auth = getAuth();

export async function POST(request) {
  try {
    // T·∫°o email v√† m·∫≠t kh·∫©u ng·∫´u nhi√™n
    const randomNumber = Math.floor(10000 + Math.random() * 90000);
    const email = `trial_user_${randomNumber}@khoahoc.temp`;
    const password = generatePassword(12); // Function t·∫°o m·∫≠t kh·∫©u m·∫°nh
    
    try {
      console.log("üîÑ B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n h·ªçc th·ª≠...");
      
      // T·∫°o t√†i kho·∫£n tr√™n Firebase Auth
      const userRecord = await auth.createUser({
        email: email,
        password: password,
        displayName: `H·ªçc vi√™n th·ª≠ ${randomNumber}`,
        emailVerified: true,
      });
      
      console.log(`‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n Firebase Auth: ${userRecord.uid}`);

      // Th√™m custom claims v·ªõi vai tr√≤ v√† tr·∫°ng th√°i VIP
      const expiryDate = new Date();
      expiryDate.setHours(expiryDate.getHours() + 1); // Th·ªùi h·∫°n 1 gi·ªù
      
      await auth.setCustomUserClaims(userRecord.uid, {
        role: "user",
        isVip: true,
        vipExpiresAt: expiryDate.toISOString()
      });
      
      console.log(`‚úÖ ƒê√£ thi·∫øt l·∫≠p VIP claims cho: ${userRecord.uid}`);

      // T·∫°o document trong collection users
      const userData = {
        _id: userRecord.uid,
        uid: userRecord.uid,
        email: email,
        fullName: `H·ªçc vi√™n th·ª≠ ${randomNumber}`,
        phoneNumber: null,
        isActive: true,
        role: "user",
        createdAt: new Date(),
        updatedAt: new Date(),
        isVip: true,
        vipExpiresAt: expiryDate
      };
      
      console.log(`üîÑ ƒêang l∆∞u th√¥ng tin v√†o MongoDB...`);

      // L∆∞u v√†o MongoDB - k·∫øt n·ªëi tr·ª±c ti·∫øp ƒë·∫øn database "hocmai"
      try {
        console.log(`üîÑ K·∫øt n·ªëi ƒë·∫øn database: hocmai`);
        
        // S·ª≠ d·ª•ng connection string tr·ª±c ti·∫øp
        const mongoURI = process.env.MONGODB_URI;
        const client = new MongoClient(mongoURI);
        await client.connect();
        
        // Ch·ªçn database "hocmai" thay v√¨ database m·∫∑c ƒë·ªãnh
        const db = client.db('hocmai');
        
        // L∆∞u ng∆∞·ªùi d√πng v√†o collection users
        await db.collection("users").insertOne(userData);
        console.log(`‚úÖ ƒê√£ l∆∞u th√¥ng tin v√†o MongoDB (hocmai) th√†nh c√¥ng`);
        
        // ƒê√≥ng k·∫øt n·ªëi
        await client.close();
      } catch (mongoError) {
        console.error("‚ùå L·ªói khi l∆∞u v√†o MongoDB:", mongoError);
        
        // Th·ª≠ c√°ch kh√°c: g·ªçi API
        try {
          console.log("üîÑ Th·ª≠ l∆∞u d·ªØ li·ªáu qua API...");
          const apiResponse = await fetch("/api/user/create", {
            method: "POST",
            headers: { 
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              ...userData,
              dbName: "hocmai" // Th√™m th√¥ng tin database
            }),
          });
          
          if (apiResponse.ok) {
            console.log("‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu qua API th√†nh c√¥ng");
          } else {
            console.error("‚ùå L·ªói l∆∞u qua API:", await apiResponse.text());
          }
        } catch (apiError) {
          console.error("‚ùå L·ªói khi g·ªçi API t·∫°o ng∆∞·ªùi d√πng:", apiError);
        }
      }

      // T·∫°o custom token ƒë·ªÉ ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông
      const customToken = await auth.createCustomToken(userRecord.uid);
      console.log("‚úÖ ƒê√£ t·∫°o custom token th√†nh c√¥ng");

      // Tr·∫£ v·ªÅ th√¥ng tin t√†i kho·∫£n ƒë√£ t·∫°o v√† token
      return NextResponse.json({
        success: true,
        user: {
          uid: userRecord.uid,
          email: email,
          fullName: `H·ªçc vi√™n th·ª≠ ${randomNumber}`,
          isVip: true,
          vipExpiresAt: expiryDate.toISOString()
        },
        customToken: customToken
      });
      
    } catch (firebaseError) {
      console.error("‚ùå Firebase error:", firebaseError);
      return NextResponse.json(
        { success: false, message: "Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n: " + firebaseError.message },
        { status: 500 }
      );
    }
    
  } catch (error) {
    console.error("‚ùå Server error:", error);
    return NextResponse.json(
      { success: false, message: "ƒê√£ x·∫£y ra l·ªói server" },
      { status: 500 }
    );
  }
} 